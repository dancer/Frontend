// <auto-generated />
using System;
using Betting.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Betting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Betting.Models.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CashoutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PotentialWin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Selection")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SettledAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tournament")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Betting.Models.FavoriteTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("FavoriteTeams");
                });

            modelBuilder.Entity("Betting.Models.League", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            Id = "pl",
                            Country = "England",
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460),
                            IsFeatured = true,
                            Logo = "/leagues/pl.svg",
                            Name = "Premier League",
                            Priority = 1,
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460)
                        },
                        new
                        {
                            Id = "laliga",
                            Country = "Spain",
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460),
                            IsFeatured = true,
                            Logo = "/leagues/laliga.svg",
                            Name = "La Liga",
                            Priority = 2,
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460)
                        },
                        new
                        {
                            Id = "bundesliga",
                            Country = "Germany",
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460),
                            IsFeatured = true,
                            Logo = "/leagues/bundesliga.svg",
                            Name = "Bundesliga",
                            Priority = 3,
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460)
                        },
                        new
                        {
                            Id = "seriea",
                            Country = "Italy",
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460),
                            IsFeatured = true,
                            Logo = "/leagues/seriea.svg",
                            Name = "Serie A",
                            Priority = 4,
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460)
                        },
                        new
                        {
                            Id = "ligue1",
                            Country = "France",
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460),
                            IsFeatured = true,
                            Logo = "/leagues/ligue1.svg",
                            Name = "Ligue 1",
                            Priority = 5,
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6460)
                        });
                });

            modelBuilder.Entity("Betting.Models.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AwayTeamId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwayTeamLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AwayWinOdds")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DrawOdds")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeTeamId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeTeamLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("HomeWinOdds")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("KickoffTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Minute")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = "match1",
                            AwayTeamId = "liv",
                            AwayTeamLogo = "/teams/liv.svg",
                            AwayTeamName = "Liverpool",
                            AwayWinOdds = 3.40m,
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6510),
                            DrawOdds = 3.50m,
                            HomeTeamId = "mci",
                            HomeTeamLogo = "/teams/mci.svg",
                            HomeTeamName = "Manchester City",
                            HomeWinOdds = 2.10m,
                            IsFeatured = true,
                            IsLive = false,
                            KickoffTime = new DateTime(2025, 4, 9, 7, 37, 51, 62, DateTimeKind.Utc).AddTicks(6510),
                            LeagueId = "pl",
                            Status = "Scheduled",
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6510)
                        },
                        new
                        {
                            Id = "match2",
                            AwayTeamId = "bar",
                            AwayTeamLogo = "/teams/bar.svg",
                            AwayTeamName = "Barcelona",
                            AwayWinOdds = 3.20m,
                            CreatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6520),
                            DrawOdds = 3.30m,
                            HomeTeamId = "mad",
                            HomeTeamLogo = "/teams/mad.svg",
                            HomeTeamName = "Real Madrid",
                            HomeWinOdds = 2.20m,
                            IsFeatured = true,
                            IsLive = false,
                            KickoffTime = new DateTime(2025, 4, 9, 8, 37, 51, 62, DateTimeKind.Utc).AddTicks(6520),
                            LeagueId = "laliga",
                            Status = "Scheduled",
                            UpdatedAt = new DateTime(2025, 4, 9, 5, 37, 51, 62, DateTimeKind.Utc).AddTicks(6520)
                        });
                });

            modelBuilder.Entity("Betting.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Betting.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Betting.Models.Bet", b =>
                {
                    b.HasOne("Betting.Models.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Betting.Models.FavoriteTeam", b =>
                {
                    b.HasOne("Betting.Models.User", "User")
                        .WithMany("FavoriteTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Betting.Models.Match", b =>
                {
                    b.HasOne("Betting.Models.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Betting.Models.Transaction", b =>
                {
                    b.HasOne("Betting.Models.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Betting.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Betting.Models.League", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Betting.Models.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("FavoriteTeams");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
